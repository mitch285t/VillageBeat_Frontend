{"ast":null,"code":"var _jsxFileName = \"/Users/mitchellwilliams/flatironSschool/Final_Project/Frontend/groupie-frontend/src/components/bandInfo.js\";\nimport React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nconst bandURL = \"http://localhost:3000/bands/\";\nconst country = {\n  country: require(\"../country.jpg\")\n};\nconst blues = {\n  blues: require(\"../blues.jpg\")\n};\nconst classical = {\n  classical: require(\"../classical.jpg\")\n};\nconst electronic = {\n  electronic: require(\"../electronic.jpeg\")\n};\nconst hiphop = {\n  hiphop: require(\"../hiphop.jpeg\")\n};\nconst latin = {\n  latin: require(\"../latin.jpg\")\n};\nconst reggae = {\n  reggae: require(\"../reggae.jpg\")\n};\nconst rock = {\n  rock: require(\"../rock.jpg\")\n};\nconst soul = {\n  soul: require(\"../soul.jpg\")\n};\nconst world = {\n  world: require(\"../world.jpg\")\n};\nconst music = {\n  music: require(\"../music.jpg\")\n};\nlet genresarray = [country, blues, classical, electronic, hiphop, latin, reggae, rock, soul, world, music];\n\nclass BandInfo extends React.Component {\n  constructor() {\n    super();\n\n    this.genrearrayEmpty = name => {\n      if (this.state.genres.length > 0) {\n        let cardgenre = this.state.genres[0].name.replace(/\\s/g, \"\").toLowerCase();\n        genresarray.map(genre => {\n          if (genre = cardgenre) {\n            return genre.value;\n          }\n        });\n      } else {\n        return console.log(music);\n      }\n    };\n\n    this.state = {\n      bandName: \"\",\n      genres: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"\".concat(bandURL).concat(this.props.band.id), {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \".concat(window.localStorage.getItem(\"token\"))\n      }\n    }).then(res => res.json()).then(data => {\n      this.setState({\n        bandName: data.band.name,\n        genres: data.genres\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: this.props.band.id,\n      onClick: event => this.props.handleClick(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Card, {\n      style: ({\n        width: \"18rem\"\n      }, {\n        height: \"10rem\"\n      }),\n      className: \"card-footer\",\n      border: \"dark\",\n      text: \"white\",\n      key: this.props.band.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Card.Img, {\n      variant: \"top\",\n      src: this.genrearrayEmpty,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(Card.Body, {\n      id: this.props.band.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, this.props.band.name)), React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, this.genrearrayEmpty()))));\n  }\n\n}\n\nexport default BandInfo;","map":{"version":3,"sources":["/Users/mitchellwilliams/flatironSschool/Final_Project/Frontend/groupie-frontend/src/components/bandInfo.js"],"names":["React","Card","bandURL","country","require","blues","classical","electronic","hiphop","latin","reggae","rock","soul","world","music","genresarray","BandInfo","Component","constructor","genrearrayEmpty","name","state","genres","length","cardgenre","replace","toLowerCase","map","genre","value","console","log","bandName","componentDidMount","fetch","props","band","id","method","headers","Authorization","window","localStorage","getItem","then","res","json","data","setState","render","event","handleClick","width","height"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nconst bandURL = \"http://localhost:3000/bands/\";\nconst country = { country: require(\"../country.jpg\") };\nconst blues = { blues: require(\"../blues.jpg\") };\nconst classical = { classical: require(\"../classical.jpg\") };\nconst electronic = { electronic: require(\"../electronic.jpeg\") };\nconst hiphop = { hiphop: require(\"../hiphop.jpeg\") };\nconst latin = { latin: require(\"../latin.jpg\") };\nconst reggae = { reggae: require(\"../reggae.jpg\") };\nconst rock = { rock: require(\"../rock.jpg\") };\nconst soul = { soul: require(\"../soul.jpg\") };\nconst world = { world: require(\"../world.jpg\") };\nconst music = { music: require(\"../music.jpg\") };\nlet genresarray = [\n  country,\n  blues,\n  classical,\n  electronic,\n  hiphop,\n  latin,\n  reggae,\n  rock,\n  soul,\n  world,\n  music\n];\nclass BandInfo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      bandName: \"\",\n      genres: \"\"\n    };\n  }\n  componentDidMount() {\n    fetch(`${bandURL}${this.props.band.id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${window.localStorage.getItem(\"token\")}`\n      }\n    })\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          bandName: data.band.name,\n          genres: data.genres\n        });\n      });\n  }\n  genrearrayEmpty = name => {\n    if (this.state.genres.length > 0) {\n      let cardgenre = this.state.genres[0].name\n        .replace(/\\s/g, \"\")\n        .toLowerCase();\n      genresarray.map(genre => {\n        if ((genre = cardgenre)) {\n          return genre.value;\n        }\n      });\n    } else {\n      return console.log(music);\n    }\n  };\n\n  render() {\n    return (\n      <div\n        id={this.props.band.id}\n        onClick={event => this.props.handleClick(event)}\n      >\n        <Card\n          style={({ width: \"18rem\" }, { height: \"10rem\" })}\n          className=\"card-footer\"\n          border=\"dark\"\n          text=\"white\"\n          key={this.props.band.id}\n        >\n          <Card.Img variant=\"top\" src={this.genrearrayEmpty} />\n          <Card.Body id={this.props.band.id}>\n            <Card.Text>{this.props.band.name}</Card.Text>\n          </Card.Body>\n          <Card.Body>\n            <Card.Text>{this.genrearrayEmpty()}</Card.Text>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n  }\n}\nexport default BandInfo;\n"]},"metadata":{},"sourceType":"module"}