{"ast":null,"code":"var _jsxFileName = \"/Users/mitchellwilliams/flatironSschool/Final_Project/Frontend/groupie-frontend/src/components/Testing.js\";\nimport React from \"react\";\nimport moment from \"moment\";\nimport Card from \"react-bootstrap/Card\";\nimport VenuesList from \"./VenuesList.js\";\nimport Goggle from \"./Goggle.js\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nconst showsURL = \"http://localhost:3000/shows\";\nlet array = [];\n\nclass Testing extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      shows: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(showsURL, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \".concat(window.localStorage.getItem(\"token\"))\n      }\n    }).then(res => res.json()).then(data => {\n      this.setState({\n        shows: data.shows\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, this.state.shows.map(show => {\n      for (let i = 0; i < this.props.bands.length; i++) {\n        if (this.props.bands[i].id === show.band_id) {\n          return React.createElement(Container, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 41\n            },\n            __self: this\n          }, React.createElement(Row, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 42\n            },\n            __self: this\n          }, React.createElement(Col, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 43\n            },\n            __self: this\n          }, React.createElement(Card, {\n            border: \"dark\",\n            text: \"white\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 44\n            },\n            __self: this\n          }, React.createElement(Card.Body, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 45\n            },\n            __self: this\n          }, React.createElement(Card.Title, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46\n            },\n            __self: this\n          }, \"\".concat(moment(show.time).format(\" hh:mm A, MMMM Do, YYYY \"))), React.createElement(Card.Text, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 51\n            },\n            __self: this\n          }, this.props.bands[i].name, \" \", this.props.bands[i].genres)), \" \", React.createElement(Card.Footer, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56\n            },\n            __self: this\n          }, React.createElement(VenuesList, {\n            show: show,\n            band: this.props.bands[i],\n            handleLink: this.props.handleLink,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57\n            },\n            __self: this\n          })), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63\n            },\n            __self: this\n          })))));\n        }\n      }\n    }));\n  }\n\n}\n\nexport default Testing;","map":{"version":3,"sources":["/Users/mitchellwilliams/flatironSschool/Final_Project/Frontend/groupie-frontend/src/components/Testing.js"],"names":["React","moment","Card","VenuesList","Goggle","Container","Row","Col","showsURL","array","Testing","Component","constructor","state","shows","componentDidMount","fetch","method","headers","Authorization","window","localStorage","getItem","then","res","json","data","setState","render","map","show","i","props","bands","length","id","band_id","time","format","name","genres","handleLink"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport moment from \"moment\";\nimport Card from \"react-bootstrap/Card\";\nimport VenuesList from \"./VenuesList.js\";\nimport Goggle from \"./Goggle.js\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nconst showsURL = \"http://localhost:3000/shows\";\nlet array = [];\nclass Testing extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      shows: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(showsURL, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${window.localStorage.getItem(\"token\")}`\n      }\n    })\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          shows: data.shows\n        });\n      });\n  }\n\n  render() {\n    return (\n      <>\n        {this.state.shows.map(show => {\n          for (let i = 0; i < this.props.bands.length; i++) {\n            if (this.props.bands[i].id === show.band_id) {\n              return (\n                <Container>\n                  <Row>\n                    <Col>\n                      <Card border=\"dark\" text=\"white\">\n                        <Card.Body>\n                          <Card.Title>\n                            {`${moment(show.time).format(\n                              \" hh:mm A, MMMM Do, YYYY \"\n                            )}`}\n                          </Card.Title>\n                          <Card.Text>\n                            {this.props.bands[i].name}{\" \"}\n                            {this.props.bands[i].genres}\n                          </Card.Text>\n                        </Card.Body>{\" \"}\n                        <Card.Footer>\n                          <VenuesList\n                            show={show}\n                            band={this.props.bands[i]}\n                            handleLink={this.props.handleLink}\n                          />\n                        </Card.Footer>\n                        <br />\n                      </Card>\n                    </Col>\n                  </Row>\n                </Container>\n              );\n            }\n          }\n        })}\n      </>\n    );\n  }\n}\nexport default Testing;\n"]},"metadata":{},"sourceType":"module"}